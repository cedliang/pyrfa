#ifndef __SESSION_LAYER_THREADED_EXAMPLE__MFENCODER__H__
#define __SESSION_LAYER_THREADED_EXAMPLE__MFENCODER__H__

#include "SessionLayer/MarketDataEnums.h"
#include "Common/RFA_String.h"
#include <iostream>
#include <sstream>
#include <string>
#include <string.h>
#include <assert.h>

// Reuters MarketFeed field separators
#define		RTR_FS	 '\x1C'
#define		RTR_GS	 '\x1D'
#define		RTR_RS	 '\x1E'
#define		RTR_US	 '\x1F'
#define		RTR_ESC	 '\x1B'

#define		MAX_BUFFER	1024

using namespace rfa::common;
using namespace rfa::sessionLayer;
using namespace std;

class CMessageType
{
public:
	//MessageTypeEnums is used for specify message type for market data
	enum MessageTypeEnums {	
		Verify = 318,
		Update = 316,
		Correction = 317,
		ClosingRun = 312,
		SnapResponse = 340,		//Image or Snapshot
		AggregateUpdate = 350
	};

private:
// Declared, but not implemented to prevent default behavior generated by compiler
	CMessageType( const CMessageType & );
	CMessageType & operator=( const CMessageType & );
};

class CMFEncoder
{
public:
	CMFEncoder();
	~CMFEncoder();

	//Set a message type to market data
	void setMessageType(CMessageType::MessageTypeEnums msgType);
	//Get the message type of market data
	const CMessageType::MessageTypeEnums getMessageType() const;
	
	//Set an item name to header of message
	void setRICName(const RFA_String & RICName);
	//Get the item name from header of message
	const RFA_String & getRICName() const;

	//Set a ClientItem tag to header of message
	void setTag(const RFA_String & tag);
	//Get the ClientItem tag from header of message
	const RFA_String & getTag() const;	

	//Set R_Status to header of message
	void setRStatus(const RFA_String & rStatus);
	//Get R_Status from header of message
	const RFA_String & getRStatus() const;

	//Set field list number to header of message 
	void setFieldListNumber(const int fieldListNo);
	//Get fiels list number from header of message
	const int getFieldListNumber() const;

	//Set Record transaction level to header of message
	void setRTL(const RFA_String & rtl);
	//Get Record transaction level from header of message
	const RFA_String & getRTL() const;

	//Set number of update or correction messages to header of AggregateUpdate message
	void setDeltaRTL(const RFA_String & deltaRTL);
	//Get number of update or correction message from header of AggregateUpdate message
	const RFA_String & getDeltaRTL() const;

	//Set string to message
	void setBuffer(const RFA_String & strBuffer);
	//Get message as string
	const char * getBuffer() const;

	//Set verify subsciption to message
	void setVerSub(const RFA_String & verSub);
	//Get verify subscription of message
	const RFA_String & getVerSub() const;

	//Make buffer of message after finishing to set data and header fields
	const char * makeBuffer();
	//Clear buffer and header of message
	void clearBuffer();
	//Clear header of message
	void clearHeader();
	//Append field ID and value to buffer
	void appendField(const RFA_String & fid, const RFA_String & value);
	//Change value of specified field ID in buffer
	void changeFieldValue(const RFA_String & fid, const RFA_String & newValue);
	//Remove field and value of specified field ID
	void removeField(const RFA_String & fid);

private:
	//Make header in market feed format
	void makeHeader();
	//Make buffer in market feed format
	void makeIntBuffer();
	//Get length of header
	unsigned long headerLength();
	//Get length of buffer
	unsigned long fidBufferLength();
	//Get length of header and buffer
	unsigned long bufferLength();

	CMessageType::MessageTypeEnums	_msgType;
	char *							_header;
	char *							_fidBuffer;
	char *							_buffer;
	RFA_String						_ricName;
	RFA_String						_tag;
	RFA_String						_rStatus;
	int								_fieldListNo;
	RFA_String						_rtl;
	RFA_String						_deltaRTL;
	RFA_String						_verSub;
	
private:
// Declared, but not implemented to prevent default behavior generated by compiler
	CMFEncoder( const CMFEncoder & );
	CMFEncoder & operator=( const CMFEncoder & );

};


#endif // __SESSION_LAYER_THREADED_EXAMPLE__MFENCODER__H__

